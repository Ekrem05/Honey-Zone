@using System.Text
@model StatisticsViewModel

@if (@TempData["Error"]!=null)
{
    <div class="alert alert-danger alert-dismissible mt-2">
        @TempData["Error"]
        <a href="#" class="btn btn-close close" data-dismiss="alert" aria-label="close"></a>
    </div>
}
@if (@TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible mt-2">
        @TempData["Success"]
        <a href="#" class="btn btn-close close" data-dismiss="alert" aria-label="close"></a>
    </div>
}

<partial name="_AdminNavPartialView"/>
<div class="bg-black w-100 h-25  d-flex mt-5 p-lg-5 justify-content-lg-around">
    <div class="bg-white position-relative m-auto w-40 h-10 p-5">
        <h2>Брой продукти продадени според категория</h2>
        <canvas id="CategoryCart" style="width: 30%; height: 100px;"></canvas>
    </div>
    <div class="bg-white position-relative m-auto w-40 h-10 p-5">
        <h2 class="text-center">Склад</h2>
        <canvas id="StockCart" style="width: 80%; height: 400px;"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const stockCtx = document.getElementById('StockCart');
    new Chart(stockCtx, {
        type: 'bar',
        data: {
            labels: [@Html.Raw(string.Join(", ", Model.StockStatistic.ProductsInStockPair.Select(x => $"'{x.Key}'")))],
            datasets: [{
                label: 'Quantity In Stock',
                data: [
    @{
        List<string> values = new();

        foreach (var key in Model.StockStatistic.ProductsInStockPair.Keys)
        {
            values.Add(Model.StockStatistic.ProductsInStockPair[key].ToString());
        }
    }
    @string.Join(", ", values)
                                ],
                backgroundColor: [
    @foreach (var item in Model.StockStatistic.ProductsInStockPair)
    {
        Random rnd = new Random();
        int valueR = rnd.Next(0, 255);
        int valueG = rnd.Next(0, 255);
        int valueB = rnd.Next(0, 255);

        @: 'rgb(@valueR, @valueG, @valueB)',
    }
                                ],
                borderColor: [
    @foreach (var item in Model.StockStatistic.ProductsInStockPair)
    {
        Random rnd = new Random();
        int valueR = rnd.Next(0, 255);
        int valueG = rnd.Next(0, 255);
        int valueB = rnd.Next(0, 255);

        @: 'rgb(@valueR, @valueG, @valueB)',
    }
                                ],
                borderWidth: 1
            }]


        }, options: {
            scales: {
                y: {
                    beginAtZero: true,
                },
            },
        },

    });
</script>
<script>
    const Categoryctx = document.getElementById('CategoryCart');
    new Chart(Categoryctx, {
        type: 'doughnut',
        data: {
            labels: [
                    @Html.Raw(Model.CategoryStatistic.GetCategoryLabels())
            ],
            datasets: [{
                label: 'Sold Items',
                data: [
                       @Model.CategoryStatistic.GetCategoryData()
                    ],
                backgroundColor: [

                    @foreach (var item in Model.CategoryStatistic.ProductsSoldInCategory)
                    {
                        Random rnd = new Random();
                        int valueR = rnd.Next(0,255);
                        int valueG = rnd.Next(0,255);
                        int valueB = rnd.Next(0, 255);

                        @: 'rgb(@valueR, @valueG, @valueB)',
                    }
                ],
                hoverOffset: 4
            }]
        }
    });
</script>


@section Scripts{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}