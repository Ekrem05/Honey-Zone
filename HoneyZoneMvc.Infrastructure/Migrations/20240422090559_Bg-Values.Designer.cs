// <auto-generated />
using System;
using HoneyZoneMvc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HoneyZoneMvc.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240422090559_Bg-Values")]
    partial class BgValues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78355d47-6040-4676-9972-ac8be4f19882"),
                            Name = "Мед"
                        },
                        new
                        {
                            Id = new Guid("c7d08da8-a5af-4596-8ad2-d0f99091297f"),
                            Name = "Прашец"
                        },
                        new
                        {
                            Id = new Guid("f4251d33-9582-4be6-8bea-be96dd30804e"),
                            Name = "Восък"
                        },
                        new
                        {
                            Id = new Guid("eb2aecdd-7815-49aa-973b-ee3173760fc5"),
                            Name = "Сувенири"
                        });
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.DeliveryMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("DeliverMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e0b4246-717e-4527-b11f-6891b7292f4a"),
                            Name = "Speedy"
                        },
                        new
                        {
                            Id = new Guid("00ee9595-1c69-424b-85b0-e1ed0d036a47"),
                            Name = "Econt"
                        });
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.IdentityModels.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("83e83014-e29a-4d0e-9238-b52cf68bf6b7"),
                            ConcurrencyStamp = "29bdab41-c409-4a8d-bd42-4d204566ca89",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10b051ec-ea4e-45a1-a02e-8c7fecab633f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f308cbc2-e3ac-42cc-b041-978a309d49b5",
                            Email = "administrator@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMINISTRATOR@GMAIL.COM",
                            NormalizedUserName = "FIRSTADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELt+4pSmqmiUY1fBTmGXe3DT3kL0KOnRk0eiO/oFgLgyV33EPafuzWOy3wvHIC+iuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "C138A9DB-F65A-48E5-BAEC-BF07ECF56E08",
                            TwoFactorEnabled = false,
                            UserName = "FirstAdmin"
                        });
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.ImageUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ImageUrls");
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpectedDelivery")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalSum")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Product Description");

                    b.Property<double>("Discount")
                        .HasColumnType("float")
                        .HasComment("Product Discounted");

                    b.Property<bool>("IsDiscounted")
                        .HasColumnType("bit")
                        .HasComment("Has Discount Or Not");

                    b.Property<string>("MainImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Product Name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasComment("Product Price");

                    b.Property<string>("ProductAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Product Amount");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasComment("Quantity Of The Product Available In Stock");

                    b.Property<int>("TimesOrdered")
                        .HasColumnType("int")
                        .HasComment("Number of times product has been ordered");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7ecd019-40b1-47f3-89c4-67e3625f796b"),
                            CategoryId = new Guid("78355d47-6040-4676-9972-ac8be4f19882"),
                            Description = "Насладете се на златистистият вкус на нашия слънчогледов мед. С богатия си, цветен аромат и силен вкус, този мед е истинско удоволствие. Събран от живите цветя на слънчогледите, той се отличава с гладка текстура и леко орехов сладникав вкус. Идеален за добавяне на допир от слънце към вашето сутрешно чайче или за поръсване върху свежо изпечени изделия. Преживейте чистия вкус на природата с нашия слънчогледов мед.",
                            Discount = 20.0,
                            IsDiscounted = true,
                            MainImageUrl = "bg honey2.png",
                            Name = "Слънчогледов мед",
                            Price = 19.989999999999998,
                            ProductAmount = "800g",
                            QuantityInStock = 82,
                            TimesOrdered = 1
                        },
                        new
                        {
                            Id = new Guid("51207a00-f1f1-47de-acd4-b311125f060f"),
                            CategoryId = new Guid("78355d47-6040-4676-9972-ac8be4f19882"),
                            Description = "Акациевият мед е светъл, почти безцветен и прозрачен, с лек аромат на цветя. Има фина текстура и деликатен вкус, който може да варира от леко сладък до умерено сладък в зависимост от източника на нектар. Често се използва в готвенето и печенето поради естествената си сладост и мек вкус.",
                            Discount = 0.0,
                            IsDiscounted = false,
                            MainImageUrl = "attachment_86137655.jpg",
                            Name = "Акациев мед",
                            Price = 25.989999999999998,
                            ProductAmount = "1kg",
                            QuantityInStock = 27,
                            TimesOrdered = 2
                        },
                        new
                        {
                            Id = new Guid("c5483175-1d79-4c5b-88fc-f32d7a5acea7"),
                            CategoryId = new Guid("78355d47-6040-4676-9972-ac8be4f19882"),
                            Description = "Потопете се в изискания вкус и ползите за здравето на мановият мед. Произведен от чистите пейзажи на Нова Зеландия, този рядък мед е известен с богатия си вкус и мощните си лечебни свойства. Със своите уникални антибактериални и антиоксидантни качества, медът Манука предлага естествено стимулиране на имунната ви система и стимулира общото ви благополучие.",
                            Discount = 0.0,
                            IsDiscounted = false,
                            MainImageUrl = "black bg honey.png",
                            Name = "Манов мед",
                            Price = 18.989999999999998,
                            ProductAmount = "1kg",
                            QuantityInStock = 11,
                            TimesOrdered = 3
                        },
                        new
                        {
                            Id = new Guid("1886cc74-89ae-4115-a907-2cfafdb730c5"),
                            CategoryId = new Guid("c7d08da8-a5af-4596-8ad2-d0f99091297f"),
                            Description = "Открийте силата на природата с нашия премиум продукт от пчелен прашец. Пълен с хранителни вещества и събран от най-добрите източници, нашият пчелен прашец е естествено стимулиращ за здравето ви и рутината за благополучие. Просто поръсете го върху любимите си храни или го смесете в смутита за вкусно и хранително допълнение. Дайте енергия на деня си по естествен начин с нашия пчелен прашец.",
                            Discount = 55.0,
                            IsDiscounted = true,
                            MainImageUrl = "bee-pollen-2549125_1280.jpg",
                            Name = "Пчелен прашец",
                            Price = 55.990000000000002,
                            ProductAmount = "2kg",
                            QuantityInStock = 102,
                            TimesOrdered = 0
                        },
                        new
                        {
                            Id = new Guid("429c5420-2a3d-4c5e-ae7f-a0f2cb0fd90a"),
                            CategoryId = new Guid("f4251d33-9582-4be6-8bea-be96dd30804e"),
                            Description = "Открийте универсалната красота на чистия пчелен восък. Известен с естествения си аромат и златист цвят, пчелният восък е универсална съставка, използвана в свещи, козметични продукти и други. Създаден от пчели с прецизност, той предлага нежна, защитна бариера за кожата ви и топъл, пригласителен блясък, когато се запали. Прегърнете вечната елегантност и естествената привлекателност на пчелния восък в ежедневните си ритуали.",
                            Discount = 10.0,
                            IsDiscounted = true,
                            MainImageUrl = "Fresh-beeswax-for-hair-on-the-table.jpg",
                            Name = "Пчелен восък",
                            Price = 31.989999999999998,
                            ProductAmount = "900g",
                            QuantityInStock = 202,
                            TimesOrdered = 0
                        },
                        new
                        {
                            Id = new Guid("ea22a3f5-d5bc-432b-b7b0-e06e8e5db562"),
                            CategoryId = new Guid("eb2aecdd-7815-49aa-973b-ee3173760fc5"),
                            Description = "Изработен от издръжливи материали, той сигурно държи вашите бележки, снимки и списъци с покупки на място, като добавя искрица на личност на вратата на вашата хладилна витрина.",
                            Discount = 0.0,
                            IsDiscounted = false,
                            MainImageUrl = "BeeMagnet.jpg",
                            Name = "Магнит за хладилник",
                            Price = 1.99,
                            ProductAmount = "Единичен артикул",
                            QuantityInStock = 100,
                            TimesOrdered = 0
                        },
                        new
                        {
                            Id = new Guid("5b9559cd-937a-4452-8495-cdf80fae8be2"),
                            CategoryId = new Guid("eb2aecdd-7815-49aa-973b-ee3173760fc5"),
                            Description = "Представяме ви керамична чаша с малки пчелички, добавяща допир на природа към вашето сутрешно ежедневие. Изработена с внимание, всяка пчела е ръчно рисувана за уникален и очарователен дизайн.",
                            Discount = 0.0,
                            IsDiscounted = false,
                            MainImageUrl = "coffee-cup-bees.jpg",
                            Name = "Чаша за кафе",
                            Price = 2.9900000000000002,
                            ProductAmount = "Единичен артикул",
                            QuantityInStock = 50,
                            TimesOrdered = 0
                        });
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17c9ccc3-e047-424c-bcfd-d4942f8d8bad"),
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = new Guid("2ceae410-c679-4c8e-867f-448be043dd6c"),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("289dc024-0555-4c6e-b5e5-bf5ab9592f94"),
                            Name = "Sent"
                        },
                        new
                        {
                            Id = new Guid("f387dc04-13dc-4211-9c54-ff44e2910984"),
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = new Guid("d1f0fcab-ac60-4848-8cb0-d2b0fe23b01c"),
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("10b051ec-ea4e-45a1-a02e-8c7fecab633f"),
                            RoleId = new Guid("83e83014-e29a-4d0e-9238-b52cf68bf6b7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.ImageUrl", b =>
                {
                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.IdentityModels.ApplicationUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("OrderDetail");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.OrderProduct", b =>
                {
                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.IdentityModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.IdentityModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HoneyZoneMvc.Infrastructure.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.DeliveryMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("HoneyZoneMvc.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
